MiniAgda by Andreas Abel and Karl Mehltretter
--- opening "drop.ma" ---
--- scope checking ---
--- type checking ---
type  SNat : + Size -> Set
term  SNat.zero : .[s!ze : Size] -> .[i < s!ze] -> SNat s!ze
term  SNat.zero : .[i : Size] -> < SNat.zero i : SNat $i >
term  SNat.succ : .[s!ze : Size] -> .[i < s!ze] -> ^ SNat i -> SNat s!ze
term  SNat.succ : .[i : Size] -> ^(y1 : SNat i) -> < SNat.succ i y1 : SNat $i >
type  Stream : - Size -> Set
term  Stream.cons : .[i : Size] -> ^(y1 : SNat #) -> ^(y2 : Stream i) -> < Stream.cons i y1 y2 : Stream $i >
term  drop : .[i : Size] -> SNat i -> Stream # -> Stream #
{ drop [.$i] (SNat.zero [i]) xs = xs
; drop [.$i] (SNat.succ [i] y) (Stream.cons [.#] x xs) = drop [i] y xs
}
--- evaluating ---
--- closing "drop.ma" ---
