MiniAgda by Andreas Abel and Karl Mehltretter
--- opening "loopTypesHiddenInData.ma" ---
--- scope checking ---
--- type checking ---
type  SNat : + Size -> Set
term  zero : .[i : Size] -> SNat $i
term  succ : .[i : Size] -> ^ SNat i -> SNat $i
type  SNat : + Size -> Set
type  Maybe : ++(A : Set) -> Set
term  nothing : .[A : Set] -> Maybe A
term  just : .[A : Set] -> ^ A -> Maybe A
type  Maybe : ++(A : Set) -> Set
type  Nat : Set
type  Nat = SNat #
term  shift_case : .[i : Size] -> Maybe (SNat $i) -> Maybe (SNat i)
{ shift_case [i] (nothing [.SNat $i]) = nothing [SNat i]
; shift_case [.i] (just [.SNat $i] (zero [i])) = nothing [SNat i]
; shift_case [.i] (just [.SNat $i] (succ [i] x)) = just [SNat i] x
}
term  shift : .[i : Size] -> (Nat -> Maybe (SNat $i)) -> Nat -> Maybe (SNat i)
term  shift = [\ i ->] \ f -> \ n -> _shift_case [i] (f (succ [#] n))
term  inc : Nat -> Maybe Nat
term  inc = \ n -> just [Nat] (succ [#] n)
type  Unit : Set
term  unit : Unit
type  Unit : Set
type  loopType : Set
term  lt : .[i : Size] -> ^ SNat i -> ^ (Nat -> Maybe (SNat i)) -> loopType
type  loopType : Set
type  loopCaseType : Set
term  lct : .[i : Size] -> ^ (Nat -> Maybe (SNat i)) -> ^ Maybe (SNat i) -> loopCaseType
type  loopCaseType : Set
term  loop : loopType -> Unit
term  loop_case : loopCaseType -> Unit
{ loop (lt [.$i] (zero [i]) f) = loop_case (lct [$i] f (f (zero [i])))
; loop (lt [.$i] (succ [i] n) f) = loop (lt [i] n (shift [i] f))
}
{ loop_case (lct [i] f (nothing [.SNat i])) = unit
; loop_case (lct [.$i] f (just [.SNat $i] (zero [i]))) = unit
; loop_case (lct [.$i] f (just [.SNat $i] (succ [i] y))) = loop (lt [i] y (shift [i] f))
}
error during typechecking:
Termination check for mutual block ["loop","loop_case"] fails for ["loop","loop_case"]
