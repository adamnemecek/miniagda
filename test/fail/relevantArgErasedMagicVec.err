MiniAgda by Andreas Abel and Karl Mehltretter
--- opening "relevantArgErasedMagicVec.ma" ---
--- scope checking ---
--- type checking ---
type  Sigma : ^(A : Set) -> ^(B : A -> Set) -> Set
term  pair : .[A : Set] -> .[B : A -> Set] -> ^(fst : A) -> ^(snd : B fst) -> < pair fst snd : Sigma A B >
term  fst : .[A : Set] -> .[B : A -> Set] -> (pair : Sigma A B) -> A
{ fst [A] [B] (pair #fst #snd) = #fst
}
term  snd : .[A : Set] -> .[B : A -> Set] -> (pair : Sigma A B) -> B (fst [A] [B] pair)
{ snd [A] [B] (pair #fst #snd) = #snd
}
type  Nat : Set
term  zero : < zero : Nat >
term  succ : ^(y0 : Nat) -> < succ y0 : Nat >
type  Empty : Set
term  magic : .[A : Set] -> .[p : Empty] -> A
{}
type  Unit : Set
term  unit : < unit : Unit >
type  Vec : .[A : Set] -> (n : Nat) -> Set
error during typechecking:
Vec
/// clause 2
/// right hand side
/// checkExpr 2 |- Sigma A (\ z -> Vec A n) : Set
/// inferExpr' Sigma A (\ z -> Vec A n)
/// inferExpr' Sigma A
/// inferExpr' A
/// inferExpr: variable A : Set may not occur
/// , because it is marked as erased
