MiniAgda by Andreas Abel and Karl Mehltretter
--- opening "inconsistentAssumption2.ma" ---
--- scope checking ---
--- type checking ---
type  SNat : + Size -> Set
term  zero : .[s!ze : Size] -> .[i < s!ze] -> SNat s!ze
term  zero : .[i : Size] -> < zero i : SNat $i >
term  succ : .[s!ze : Size] -> .[i < s!ze] -> ^ SNat i -> SNat s!ze
term  succ : .[i : Size] -> ^(y1 : SNat i) -> < succ i y1 : SNat $i >
type  Eq : ^(A : Set) -> ^(a : A) -> ^ A -> Set
term  refl : .[A : Set] -> .[a : A] -> < refl : Eq A a a >
term  subst : .[A : Set] -> .[P : A -> Set] -> (i : A) -> (j : A) -> Eq A i j -> P i -> P j
{ subst [A] [P] i .i refl p = p
}
error during typechecking:
type of h
/// not a type: (ass : (i : Size) -> Eq Size $i i) -> (i : Size) -> SNat i -> SNat #
/// inferExpr' (ass : (i : Size) -> Eq Size $i i) -> (i : Size) -> SNat i -> SNat #
/// inferExpr' (i : Size) -> Eq Size $i i
/// new i <= #
/// inferExpr' Eq Size $i i
/// inferExpr' Eq Size $i
/// inferExpr' Eq Size
/// leqVal' (subtyping) [(i,0)] |- < Size : TSize >  <=+  Set
/// leqVal' (subtyping) [(i,0)] |- TSize  <=+  Set
/// universe test TSize <= Set failed
