MiniAgda by Andreas Abel and Karl Mehltretter
--- opening "OverlappingPatternIndFam.ma" ---
--- scope checking ---
--- type checking ---
type  Bool : Set
term  true : < true : Bool >
term  false : < false : Bool >
type  Id : ^(A : Set) -> ^(a : A) -> ^ A -> Set
term  refl : .[A : Set] -> .[a : A] -> < refl : Id A a a >
term  subst : .[A : Set] -> (a : A) -> (b : A) -> Id A a b -> .[P : A -> Set] -> P a -> P b
{ subst [A] a .a refl [P] x = x
}
type  DecEq : ^(A : Set) -> ^(a : A) -> ^ A -> Set
term  eq : .[A : Set] -> .[a : A] -> < eq : DecEq A a a >
term  notEq : .[A : Set] -> .[a : A] -> .[b : A] -> < notEq b : DecEq A a b >
error during typechecking:
offDiag
/// not a type: (A : Set) -> (f : (a : A) -> (b : A) -> DecEq A a b) -> (a : A) -> (b : A) -> Id (DecEq A a b) (f a b) (notEq A a b)
/// inferExpr' (A : Set) -> (f : (a : A) -> (b : A) -> DecEq A a b) -> (a : A) -> (b : A) -> Id (DecEq A a b) (f a b) (notEq A a b)
/// new A : Set
/// inferExpr' (f : (a : A) -> (b : A) -> DecEq A a b) -> (a : A) -> (b : A) -> Id (DecEq A a b) (f a b) (notEq A a b)
/// new f : ((a : v0::Tm) -> (b : A) -> DecEq A a b{A = v0})
/// inferExpr' (a : A) -> (b : A) -> Id (DecEq A a b) (f a b) (notEq A a b)
/// new a : v0
/// inferExpr' (b : A) -> Id (DecEq A a b) (f a b) (notEq A a b)
/// new b : v0
/// inferExpr' Id (DecEq A a b) (f a b) (notEq A a b)
/// checkApp (^(DecEq v0 v2 v3)::Tm -> Set{a = (v1 v2 v3), A = (DecEq v0 v2 v3)}) eliminated by notEq A a b
/// checkExpr 4 |- notEq A a b : DecEq A a b
/// checkForced fromList [(A,0),(f,1),(a,2),(b,3)] |- notEq A a b : DecEq A a b
/// checkApp (.[b : v0::Tm] -> < notEq b : DecEq A a b >{a = v2, A = v0}) eliminated by A
/// leqVal' (subtyping)  < A : Set >  <=+  A
/// leqVal' (subtyping)  Set  <=+  A
/// leqApp: head mismatch Set != A
