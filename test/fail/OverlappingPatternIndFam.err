MiniAgda by Andreas Abel and Karl Mehltretter
--- opening "OverlappingPatternIndFam.ma" ---
--- scope checking ---
--- type checking ---
type  Bool : Set
term  true : Bool
term  false : Bool
type  Bool : Set
type  Id : ^(A : Set) -> ^(a : A) -> ^ A -> Set
term  refl : .[A : Set] -> .[a : A] -> Id A a a
type  Id : ^(A : Set) -> ^(a : A) -> ^ A -> Set
term  subst : .[A : Set] -> (a : A) -> (b : A) -> Id A a b -> .[P : A -> Set] -> P a -> P b
{ subst [A] a .a (refl) [P] x = x
}
type  DecEq : ^(A : Set) -> ^(a : A) -> ^ A -> Set
term  eq : .[A : Set] -> .[a : A] -> DecEq A a a
term  notEq : .[A : Set] -> .[a : A] -> .[b : A] -> DecEq A a b
type  DecEq : ^(A : Set) -> ^(a : A) -> ^ A -> Set
error during typechecking:
offDiag
/// not a type: (A : Set) -> (f : (a : A) -> (b : A) -> DecEq A a b) -> (a : A) -> (b : A) -> Id (DecEq A a b) (f a b) (notEq A a b)
/// inferExpr' (A : Set) -> (f : (a : A) -> (b : A) -> DecEq A a b) -> (a : A) -> (b : A) -> Id (DecEq A a b) (f a b) (notEq A a b)
/// new A : Set
/// inferExpr' (f : (a : A) -> (b : A) -> DecEq A a b) -> (a : A) -> (b : A) -> Id (DecEq A a b) (f a b) (notEq A a b)
/// new f : ((a : v0::Tm) -> (b : A) -> DecEq A a b{A = v0})
/// inferExpr' (a : A) -> (b : A) -> Id (DecEq A a b) (f a b) (notEq A a b)
/// new a : v0
/// inferExpr' (b : A) -> Id (DecEq A a b) (f a b) (notEq A a b)
/// new b : v0
/// inferExpr' Id (DecEq A a b) (f a b) (notEq A a b)
/// checkExpr 4 |- notEq A a b : DecEq A a b
/// checkForced fromList [(A,0),(f,1),(a,2),(b,3)] |- notEq A a b : DecEq A a b
/// leqVal' (subtyping) [(A,0),(f,1),(a,2),(b,3)] |- < A : Set >  <=+  A
/// leqVal' (subtyping) [(A,0),(f,1),(a,2),(b,3)] |- Set  <=+  A
/// leqApp: Set[] !<= v0[]
