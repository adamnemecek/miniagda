MiniAgda by Andreas Abel and Karl Mehltretter
--- opening "OverlappingPatternIndFam-sound.ma" ---
--- scope checking ---
--- type checking ---
type  Bool : Set
term  true : Bool
term  false : Bool
type  Bool : Set
type  Id : ^(A : Set) -> ^(a : A) -> ^ A -> Set
term  refl : .[A : Set] -> .[a : A] -> Id A a a
type  Id : ^(A : Set) -> ^(a : A) -> ^ A -> Set
term  subst : .[A : Set] -> (a : A) -> (b : A) -> Id A a b -> .[P : A -> Set] -> P a -> P b
{ subst [A] a .a (refl) [P] x = x
}
type  DecEq : ^(A : Set) -> ^(a : A) -> ^ A -> Set
term  eq : .[A : Set] -> .[a : A] -> DecEq A a a
term  notEq : .[A : Set] -> .[a : A] -> .[b : A] -> DecEq A a b
type  DecEq : ^(A : Set) -> ^(a : A) -> ^ A -> Set
error during typechecking:
fDiag
/// not a type: (f : (A : Set) -> (a : A) -> (b : A) -> DecEq A a b) -> (A : Set) -> (a : A) -> Id (DecEq A a a) (f A a a) (eq A a)
/// inferExpr' (f : (A : Set) -> (a : A) -> (b : A) -> DecEq A a b) -> (A : Set) -> (a : A) -> Id (DecEq A a a) (f A a a) (eq A a)
/// new f : (.[A : Set] -> (a : A) -> (b : A) -> DecEq A a b)
/// inferExpr' (A : Set) -> (a : A) -> Id (DecEq A a a) (f A a a) (eq A a)
/// new A : Set
/// inferExpr' (a : A) -> Id (DecEq A a a) (f A a a) (eq A a)
/// new a : v1
/// inferExpr' Id (DecEq A a a) (f A a a) (eq A a)
/// checkExpr 3 |- eq A a : DecEq A a a
/// checkForced fromList [(A,1),(f,0),(a,2)] |- eq A a : DecEq A a a
/// checking application to A: expected function type, found (DecEq v1 v2 v2)
