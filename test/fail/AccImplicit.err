MiniAgda by Andreas Abel and Karl Mehltretter
--- opening "AccImplicit.ma" ---
--- scope checking ---
--- type checking ---
type  Acc : ^(A : Set) -> ^(Lt : A -> A -> Set) -> (b : A) -> Set
term  acc : .[A : Set] -> .[Lt : A -> A -> Set] -> .[b : A] -> ^(accOut : (a : A) -> Lt a b -> Acc A Lt a) -> < acc accOut : Acc A Lt b >
term  accOut : .[A : Set] -> .[Lt : A -> A -> Set] -> (b : A) -> (acc : Acc A Lt b) -> (a : A) -> Lt a b -> Acc A Lt a
{ accOut [A] [Lt] b (acc #accOut) = #accOut
}
type  Nat : Set
term  zero : < zero : Nat >
term  succ : ^(y0 : Nat) -> < succ y0 : Nat >
type  R : ^ Nat -> ^ Nat -> Set
term  r1 : .[x : Nat] -> < r1 x : R (succ (succ x)) (succ zero) >
term  r2 : < r2 : R (succ zero) zero >
term  acc2 : (n : Nat) -> Acc Nat R (succ (succ n))
term  acc2 = \ n -> acc (\ a -> \ p -> case p : R a (succ (succ n))
                          {})
term  aux1 : (a : Nat) -> (p : R a (succ zero)) -> Acc Nat R a
{ aux1 (succ (succ x)) (r1 [.x]) = acc2 x
}
term  acc1 : Acc Nat R (succ zero)
term  acc1 = acc aux1
term  aux0 : (a : Nat) -> (p : R a zero) -> Acc Nat R a
{ aux0 .(succ zero) (r2) = acc1
}
term  acc0 : Acc Nat R zero
term  acc0 = acc aux0
term  accR : (n : Nat) -> Acc Nat R n
{ accR (zero) = acc0
; accR (succ (zero)) = acc1
; accR (succ (succ n)) = acc2 n
}
term  acc_dest : .[n : Nat] -> (p : Acc Nat R n) -> (m : Nat) -> R m n -> Acc Nat R m
{ acc_dest [n] (acc p) = p
}
term  f : (x : Nat) -> Acc Nat R x -> Nat
{ f x (acc p) = case x : Nat
                { zero -> f (succ x) (p (succ x) r2)
                ; succ (zero) -> f (succ x) (p (succ x) (r1 [zero]))
                ; succ (succ y) -> zero
                }
}
term  h : (x : Nat) -> .[Acc Nat R x] -> Nat
{ h (zero) [acc [p]] = h (succ zero) [p (succ zero) r2]
; h (succ (zero)) [acc [p]] = h (succ (succ zero)) [p (succ (succ zero)) (r1 [zero])]
; h (succ (succ y)) [p] = zero
}
term  bla : Nat
term  bla = f zero acc0
type  Id : ^(A : Set) -> ^(a : A) -> ^ A -> Set
term  refl : .[A : Set] -> .[a : A] -> < refl : Id A a a >
error during typechecking:
p1
/// checkExpr 0 |- \ p -> refl : (p : Acc Nat R zero) -> Id Nat (h zero [p]) (h zero [acc0])
/// checkForced fromList [] |- \ p -> refl : (p : Acc Nat R zero) -> Id Nat (h zero [p]) (h zero [acc0])
/// new p : (Acc Nat R zero)
/// checkExpr 1 |- refl : Id Nat (h zero [p]) (h zero [acc0])
/// checkForced fromList [(p,0)] |- refl : Id Nat (h zero [p]) (h zero [acc0])
/// leqVal' (subtyping) [(p,0)] |- < refl : Id Nat (h zero [p]) (h zero [p]) >  <=+  Id Nat (h zero [p]) (h zero [acc0])
/// leqVal' (subtyping) [(p,0)] |- Id Nat (h zero [p]) (h zero [p])  <=+  Id Nat (h zero [p]) (h zero [acc0])
/// leqVal' [(p,0)] |- h zero [p]  <=^  zero : Nat
/// leqApp: (h {zero {p = v0}} {[p] {p = v0}})[] !<=^ zero{}[]
