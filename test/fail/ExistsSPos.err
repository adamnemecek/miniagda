MiniAgda by Andreas Abel and Karl Mehltretter
--- opening "ExistsSPos.ma" ---
--- scope checking ---
--- type checking ---
type  Exists : ^(A : Set) -> ++(B : A -> Set) -> Set
term  exI : .[A : Set] -> .[B : A -> Set] -> ^(witness : A) -> ^(proof : B witness) -> Exists A B
type  Exists : ^(A : Set) -> ++(B : A -> Set) -> Set
G> fun witness : .[A : Set] -> .[B : A -> Set] -> (__exI : Exists A B) -> A
G> { witness A B (exI .A .B __witness __proof) = __witness
}
term  witness : .[A : Set] -> .[B : A -> Set] -> (__exI : Exists A B) -> A
{ witness [A] [B] (exI [.A] [.B] __witness __proof) = __witness
}
G> fun proof : .[A : Set] -> .[B : A -> Set] -> (__exI : Exists A B) -> B (witness A B __exI)
G> { proof A B (exI .A .B __witness __proof) = __proof
}
term  proof : .[A : Set] -> .[B : A -> Set] -> (__exI : Exists A B) -> B (witness [A] [B] __exI)
{ proof [A] [B] (exI [.A] [.B] __witness __proof) = __proof
}
type  Foo : Set
term  foo : ^ Exists Foo (\ x -> Foo) -> Foo
type  Foo : Set
error during typechecking:
checking positivity
/// polarity check ++ <= ^ failed
