MiniAgda by Andreas Abel and Karl Mehltretter
--- opening "stream_x_is_cons_x_tail_x.ma" ---
--- scope checking ---
--- type checking ---
type  Nat : Set
term  zero : < zero : Nat >
term  succ : ^(y0 : Nat) -> < succ y0 : Nat >
type  Nat : Set
term  n0 : Nat
term  n0 = zero
term  n1 : Nat
term  n1 = succ n0
term  n2 : Nat
term  n2 = succ n1
term  n3 : Nat
term  n3 = succ n2
term  n4 : Nat
term  n4 = succ n3
type  Stream : ++(A : Set) -> - Size -> Set
term  cons : .[A : Set] -> .[i : Size] -> ^(y1 : A) -> ^(y2 : Stream A i) -> < cons i y1 y2 : Stream A $i >
type  Stream : ++(A : Set) -> - Size -> Set
term  tail : .[A : Set] -> .[i : Size] -> Stream A $i -> Stream A i
{ tail [A] [i] (cons [.i] x xs) = xs
}
term  bad : .[i : Size] -> Stream Nat i
error during typechecking:
bad
/// clause 1
/// pattern $$i
/// cannot match against deep successor pattern $$i; type: (.[i : Size] -> Stream Nat i)
