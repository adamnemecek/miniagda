MiniAgda by Andreas Abel and Karl Mehltretter
--- opening "VectorPatternNotForced.ma" ---
--- scope checking ---
--- type checking ---
type  Nat : Set
term  zero : Nat
term  succ : ^ Nat -> Nat
type  Nat : Set
term  add : Nat -> Nat -> Nat
{ add (zero) y = y
; add (succ x) y = succ (add x y)
}
type  Vec : ^(A : Set) -> ^ Nat -> Set
term  nil : .[A : Set] -> Vec A zero
term  cons : .[A : Set] -> .[n : Nat] -> ^ A -> ^ Vec A n -> Vec A (succ n)
type  Vec : ^(A : Set) -> ^ Nat -> Set
term  length : .[A : Set] -> .[n : Nat] -> Vec A n -> < n : Nat >
error during typechecking:
length
/// clause 2
/// right hand side
/// checkExpr 5 |- succ (length A n v) : < succ n : Nat >
/// checkForced fromList [(.(succ n),1),(A,0),(n,2),(a,3),(v,4)] |- succ (length A n v) : < succ n : Nat >
/// leqVal' (subtyping) [(.(succ n),1),(A,0),(n,2),(a,3),(v,4)] |- < succ (length [A] [n] v) : Nat >  <=+  < succ n : Nat >
/// leqVal' [(.(succ n),1),(A,0),(n,2),(a,3),(v,4)] |- succ (length [A] [n] v) : Nat  <=*  succ n : Nat
/// leqVal' [(.(succ n),1),(A,0),(n,2),(a,3),(v,4)] |- length [A] [n] v : Nat  <=*  n : Nat
/// leqApp: (length {[A] {v = v4, a = v3, n = v2, .(succ n) = v1, A = v0}} {[n] {v = v4, a = v3, n = v2, .(succ n) = v1, A = v0}} v4)[] !<= v2[]
