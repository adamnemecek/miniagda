MiniAgda by Andreas Abel and Karl Mehltretter
--- opening "UlfsCounterexample2.ma" ---
--- scope checking ---
--- type checking ---
type  Bool : Set
term  true : < true : Bool >
term  false : < false : Bool >
type  Bool : Set
type  Nat : Set
term  zero : < zero : Nat >
term  succ : ^(y0 : Nat) -> < succ y0 : Nat >
type  Nat : Set
type  T : ^ Bool -> Set
term  nat : ^(y0 : Nat) -> < nat y0 : T true >
term  bool : ^(y0 : Bool) -> < bool y0 : T false >
type  T : ^ Bool -> Set
term  bad : .[F : Nat -> Set] -> ^(f : .[x : Bool] -> T x -> Nat) -> (g : (n : Nat) -> F (f [true] (nat n))) -> (h : F (f [false] (bool false)) -> Bool) -> Bool
error during typechecking:
bad
/// clause 1
/// right hand side
/// checkExpr 4 |- h (g zero) : Bool
/// inferExpr' h (g zero)
/// leqVal' (subtyping) [(f,1),(F,0),(g,2),(h,3)] |- < g zero : F (f [true] (nat zero)) >  <=+  F (f [false] (bool false))
/// leqVal' (subtyping) [(f,1),(F,0),(g,2),(h,3)] |- F (f [true] (nat zero))  <=+  F (f [false] (bool false))
/// leqVal' [(f,1),(F,0),(g,2),(h,3)] |- f [true] (nat zero)  <=*  f [false] (bool false) : Nat
/// leqVal' [(f,1),(F,0),(g,2),(h,3)] |- nat zero : T true  <=*  bool false : T false
/// leqVal': head mismatch (nat zero) != (bool false)
