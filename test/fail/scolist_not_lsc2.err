MiniAgda by Andreas Abel and Karl Mehltretter
--- opening "scolist_not_lsc2.ma" ---
--- scope checking ---
--- type checking ---
type  Nat : + Size -> Set
term  zero : .[s!ze : Size] -> .[i < s!ze] -> Nat s!ze
term  zero : .[i : Size] -> < zero i : Nat $i >
term  succ : .[s!ze : Size] -> .[i < s!ze] -> ^ Nat i -> Nat s!ze
term  succ : .[i : Size] -> ^(y1 : Nat i) -> < succ i y1 : Nat $i >
type  Colist : ^(A : Set) -> ^ Size -> Set
term  nil : .[A : Set] -> .[i : Size] -> < nil i : Colist A $i >
term  cons : .[A : Set] -> .[i : Size] -> ^(y1 : A) -> ^(y2 : Colist A i) -> < cons i y1 y2 : Colist A $i >
type  CoNat : ^ Size -> Set
term  cozero : .[i : Size] -> < cozero i : CoNat $i >
term  cosucc : .[i : Size] -> ^(y1 : CoNat i) -> < cosucc i y1 : CoNat $i >
term  z : CoNat #
term  z = cozero [#]
term  length2 : .[i : Size] -> .[A : Set] -> Colist A i -> CoNat i
{ length2 [.$i] [A] (nil [i]) = cozero [i]
; length2 [.$i] [A] (cons [i] a as) = cosucc [i] (length2 [i] [A] as)
}
term  omega' : .[i : Size] -> CoNat i
error during typechecking:
omega'
/// clause 1
/// pattern $i
/// checkPattern $i : matching on size, checking that target .[i : Size] -> CoNat i ends in correct coinductive sized type
/// new i : Size
/// endsInSizedCo: CoNat i
/// endsInSizedCo: target CoNat i of corecursive function is neither a CoSet or codata of size i nor a tuple type
