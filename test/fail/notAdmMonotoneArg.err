MiniAgda by Andreas Abel and Karl Mehltretter
--- opening "notAdmMonotoneArg.ma" ---
--- scope checking ---
--- type checking ---
type  Stream : ++(A : Set) -> - Size -> Set
term  cons : .[A : Set] -> .[i : Size] -> ^(y1 : A) -> ^(y2 : Stream A i) -> < cons i y1 y2 : Stream A $i >
type  Unit : Set
term  triv : < triv : Unit >
term  bla : .[i : Size] -> (Stream Unit i -> Stream Unit i) -> Stream Unit i
error during typechecking:
bla
/// clause 1
/// pattern $i
/// checkPattern $i : matching on size, checking that target .[i <= #] -> (Stream Unit i -> Stream Unit i) -> Stream Unit i ends in correct coinductive sized type
/// new i <= #
/// endsInSizedCo: (Stream Unit i -> Stream Unit i) -> Stream Unit i
/// new  : ((Stream {Unit {i = v0}} v0)::Tm -> Stream Unit i{i = v0})
/// type Stream Unit i -> Stream Unit i not lower semi continuous in i
