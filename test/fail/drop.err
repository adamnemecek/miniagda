MiniAgda by Andreas Abel and Karl Mehltretter
--- opening "drop.ma" ---
--- scope checking ---
--- type checking ---
type  SNat : + Size -> Set
term  zero : .[s!ze : Size] -> .[i < s!ze] -> SNat s!ze
term  zero : .[i : Size] -> SNat $i
term  succ : .[s!ze : Size] -> .[i < s!ze] -> ^ SNat i -> SNat s!ze
term  succ : .[i : Size] -> ^ SNat i -> SNat $i
type  SNat : + Size -> Set
type  Stream : - Size -> Set
term  cons : .[i : Size] -> ^ SNat # -> ^ Stream i -> Stream $i
type  Stream : - Size -> Set
term  drop : .[i : Size] -> SNat i -> .[j : Size] -> Stream j -> Stream j
error during typechecking:
drop
/// clause 2
/// right hand side
/// checkExpr 7 |- drop i y j xs : Stream $j
/// leqVal' (subtyping) [(i,1),(.($i),0),(y,2),(j,3),(.j,4),(x,5),(xs,6)] |- < drop [i] y [j] xs : Stream j >  <=+  Stream $j
/// leqVal' (subtyping) [(i,1),(.($i),0),(y,2),(j,3),(.j,4),(x,5),(xs,6)] |- Stream j  <=+  Stream $j
/// leqVal' [(i,1),(.($i),0),(y,2),(j,3),(.j,4),(x,5),(xs,6)] |- j  <=-  $j : Size
/// leSize v3 <=- ($ v3)
/// leSize' ($ v3) <= v3
/// leSize: 0 + 1 <= 0 failed
