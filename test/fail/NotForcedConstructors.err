MiniAgda by Andreas Abel and Karl Mehltretter
--- opening "NotForcedConstructors.ma" ---
--- scope checking ---
--- type checking ---
type  Bool : Set
term  true : < true : Bool >
term  false : < false : Bool >
type  Bool : Set
term  not : Bool -> Bool
{ not (true) = false
; not (false) = true
}
type  Nat : ^ Bool -> Set
term  zero : < zero : Nat true >
term  succ : ^(b : Bool) -> ^(y1 : Nat b) -> < succ b y1 : Nat (not b) >
type  Nat : ^ Bool -> Set
term  f : (b : Bool) -> .[Nat b] -> Bool
error during typechecking:
f
/// clause 1
/// pattern zero
/// checkPattern: constructor zero of non-computational argument zero : (Nat true{}) not forced
