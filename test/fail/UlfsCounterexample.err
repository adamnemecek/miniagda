MiniAgda by Andreas Abel and Karl Mehltretter
--- opening "UlfsCounterexample.ma" ---
--- scope checking ---
--- type checking ---
type  Bool : Set
term  true : < true : Bool >
term  false : < false : Bool >
type  Nat : Set
term  zero : < zero : Nat >
term  succ : ^(y0 : Nat) -> < succ y0 : Nat >
type  T : Bool -> Set
{ T true = Nat
; T false = Bool
}
term  bad : .[F : Nat -> Set] -> .[f : .[x : Bool] -> T x -> Nat] -> (g : (n : Nat) -> F (f [true] n)) -> (h : F (f [false] false) -> Bool) -> Bool
error during typechecking:
bad
/// clause 1
/// right hand side
/// checkExpr 4 |- h (g zero) : Bool
/// inferExpr' h (g zero)
/// leqVal' (subtyping)  < g zero : F (f [true] zero) >  <=+  F (f [false] false)
/// leqVal' (subtyping)  F (f [true] zero)  <=+  F (f [false] false)
/// leqVal'  f true zero  <=*  f false false : Nat
/// leqVal'  zero : Nat  <=*  false : Bool
/// type Nat has different shape than Bool
