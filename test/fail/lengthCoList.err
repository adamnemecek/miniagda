MiniAgda by Andreas Abel and Karl Mehltretter
--- opening "lengthCoList.ma" ---
--- scope checking ---
--- type checking ---
type  Nat : + Size -> Set
term  zero : .[s!ze : Size] -> .[i < s!ze] -> Nat s!ze
term  zero : .[i : Size] -> < zero i : Nat $i >
term  succ : .[s!ze : Size] -> .[i < s!ze] -> ^ Nat i -> Nat s!ze
term  succ : .[i : Size] -> ^(y1 : Nat i) -> < succ i y1 : Nat $i >
type  Colist : ^(A : Set) -> - Size -> Set
term  nil : .[A : Set] -> .[i : Size] -> < nil i : Colist A $i >
term  cons : .[A : Set] -> .[i : Size] -> ^(y1 : A) -> ^(y2 : Colist A i) -> < cons i y1 y2 : Colist A $i >
term  olist' : .[i : Size] -> Colist (Nat #) i
{ olist' $[i < #] = cons [i] (zero [#]) (olist' [i])
}
term  length : .[i : Size] -> .[A : Set] -> Colist A i -> Nat i
error during typechecking:
length
/// clause 1
/// pattern nil i
/// in pattern nil i, coinductive size sub pattern i must be dotted
