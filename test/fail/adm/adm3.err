MiniAgda by Andreas Abel and Karl Mehltretter
--- opening "adm/adm3.ma" ---
--- scope checking ---
--- type checking ---
type  Maybe : ^(A : Set) -> Set
term  nothing : .[A : Set] -> < nothing : Maybe A >
term  just : .[A : Set] -> ^(y0 : A) -> < just y0 : Maybe A >
type  SNat : + Size -> Set
term  zero : .[s!ze : Size] -> .[i < s!ze] -> SNat s!ze
term  zero : .[i : Size] -> < zero i : SNat $i >
term  succ : .[s!ze : Size] -> .[i < s!ze] -> ^ SNat i -> SNat s!ze
term  succ : .[i : Size] -> ^(y1 : SNat i) -> < succ i y1 : SNat $i >
term  bla : .[i : Size] -> SNat $i -> SNat i
error during typechecking:
bla
/// clause 1
/// pattern zero $i
/// pattern $i
/// successor pattern only allowed in cofun
